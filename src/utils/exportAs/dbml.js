export const toDBML = (database, tables, relationships, enums) => {
  let dbml = `// Generated by DrawDB\n// Database: ${database}\n\n`;
  
  // Add project info
  dbml += `Project ${database}_project {\n`;
  dbml += `  database_type: '${database}'\n`;
  dbml += `  Note: 'Generated by DrawDB'\n`;
  dbml += `}\n\n`;
  
  // Add enums
  if (enums && enums.length > 0) {
    enums.forEach(enumItem => {
      dbml += `Enum ${enumItem.name} {\n`;
      enumItem.values.forEach(value => {
        dbml += `  ${value}\n`;
      });
      if (enumItem.comment) {
        dbml += `  Note: '${enumItem.comment}'\n`;
      }
      dbml += '}\n\n';
    });
  }
  
  // Add tables
  tables.forEach(table => {
    dbml += `Table ${table.name} {\n`;
    
    table.fields.forEach(field => {
      dbml += `  ${field.name} ${field.type}`;
      
      // Add field size if applicable
      if (field.size && field.size.trim() !== '') {
        dbml += `(${field.size})`;
      }
      
      const attributes = [];
      if (field.primary) attributes.push('pk');
      if (field.notNull) attributes.push('not null');
      if (field.unique) attributes.push('unique');
      if (field.increment) attributes.push('increment');
      if (field.default && field.default.trim() !== '') {
        attributes.push(`default: ${field.default}`);
      }
      if (field.comment && field.comment.trim() !== '') {
        attributes.push(`note: '${field.comment}'`);
      }
      
      if (attributes.length > 0) {
        dbml += ` [${attributes.join(', ')}]`;
      }
      
      dbml += '\n';
    });
    
    // Add table indexes
    if (table.indices && table.indices.length > 0) {
      dbml += '\n  Indexes {\n';
      table.indices.forEach(index => {
        const indexFields = index.fields.join(', ');
        dbml += `    (${indexFields})`;
        if (index.unique) dbml += ' [unique]';
        if (index.name) dbml += ` [name: '${index.name}']`;
        dbml += '\n';
      });
      dbml += '  }\n';
    }
    
    // Add table comment
    if (table.comment && table.comment.trim() !== '') {
      dbml += `\n  Note: '${table.comment}'\n`;
    }
    
    dbml += '}\n\n';
  });
  
  // Add relationships
  relationships.forEach(rel => {
    const fromTable = tables.find(t => t.id === rel.startTableId);
    const toTable = tables.find(t => t.id === rel.endTableId);
    
    if (fromTable && toTable) {
      const fromField = fromTable.fields.find(f => f.id === rel.startFieldId);
      const toField = toTable.fields.find(f => f.id === rel.endFieldId);
      
      if (fromField && toField) {
        let cardinality = '-';
        switch (rel.cardinality) {
          case 'one_to_many':
            cardinality = '>';
            break;
          case 'many_to_one':
            cardinality = '<';
            break;
          case 'one_to_one':
            cardinality = '-';
            break;
          default:
            cardinality = '-';
        }
        
        dbml += `Ref: ${fromTable.name}.${fromField.name} ${cardinality} ${toTable.name}.${toField.name}`;
        
        // Add relationship constraints
        const constraints = [];
        if (rel.updateConstraint && rel.updateConstraint !== 'No action') {
          constraints.push(`update: ${rel.updateConstraint.toLowerCase()}`);
        }
        if (rel.deleteConstraint && rel.deleteConstraint !== 'No action') {
          constraints.push(`delete: ${rel.deleteConstraint.toLowerCase()}`);
        }
        
        if (constraints.length > 0) {
          dbml += ` [${constraints.join(', ')}]`;
        }
        
        dbml += '\n';
      }
    }
  });
  
  return dbml;
};